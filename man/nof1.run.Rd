% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nof1.run.R
\name{nof1.run}
\alias{nof1.run}
\title{Run the model using the nof1 object}
\usage{
nof1.run(nof1, inits = NULL, n.chains = 3, max.run = 1e+05,
  setsize = 10000, n.run = 50000, conv.limit = 1.05,
  extra.pars.save = NULL)
}
\arguments{
\item{nof1}{nof1 object created from \code{\link{nof1.data}} function}

\item{inits}{Initial values for the parameters being sampled. If left unspecified, program will generate reasonable initial values.}

\item{n.chains}{Number of chains to run}

\item{max.run}{Maximum number of iterations that user is willing to run. If the algorithm is not converging, it will run up to \code{max.run} iterations before printing a message that it did not converge}

\item{setsize}{Number of iterations that are run between convergence checks. If the algorithm converges fast, user wouldn't need a big setsize. The number that is printed between each convergence checks is the gelman-rubin diagnostics and we would want that to be below the conv.limit the user specifies.}

\item{n.run}{Final number of iterations that the user wants to store. If after the algorithm converges, user wants less number of iterations, we thin the sequence. If the user wants more iterations, we run extra iterations to reach the specified number of runs}

\item{conv.limit}{Convergence limit for Gelman and Rubin's convergence diagnostic.}

\item{extra.pars.save}{Parameters that user wants to save besides the default parameters saved. See code using \code{cat(nof1$code)} to see which parameters can be saved.}
}
\value{
\item{nof1}{nof1 object}
\item{inits}{Initial values that are either specified by the user or generated as a default}
\item{pars.save}{Parameters that are saved. Add more parameters in extra.pars.save if other variables are desired}
\item{data_rjags}{Data that is put into rjags function \code{jags.model}}
\item{burnin}{Half of the converged sequence is thrown out as a burnin}
\item{n.thin}{If the number of iterations user wants (n.run) is less than the number of converged sequence after burnin, we thin the sequence and store the thinning interval}
\item{samples}{MCMC samples stored using jags. The returned samples have the form of mcmc.list and can be directly applied to coda functions}
\item{max.gelman}{Maximum Gelman and Rubin's convergence diagnostic calculated for the final sample}
}
\description{
This is the core function that runs the model in our program. Before running this function, we need to specify data, prior, 
JAGS code, etc. using \code{\link{nof1.data}}.
}
\examples{
laughter
Y <- laughter$Y
Treat <- laughter$Treat
nof1 <- nof1.data(Y, Treat, ncat = 11, baseline = "Usual Routine", response = "ordinal")
result <- nof1.run(nof1)
summary(result$samples)
}
